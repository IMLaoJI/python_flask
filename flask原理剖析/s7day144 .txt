s7day144 

内容回顾：
	1. session
		- 内置
		- 自定义
		- flask-session组件
	2. wtforms组件
	3. 其他：
		a. metaclass
	
	问题1：内置session执行流程？
	
	问题2：wtforms
		
			class Foo(object):
				def __init__(self,name):
					self.name = name 
					
				def xx(self):
					pass
					
					
			obj1 = Foo('n1')
			obj2 = Foo('n1')
	问题3：面向对象中
			__init__
			__call__
			__new__
			__getattr__
			...
			__getitem__
			...
			__add__
			__enter__
			__exit__
	
今日内容：
	1. WTForms组件
		- Form类
		- 字段
		- 插件 
		
	2. SQLAlchemy
	

内容详细：
	1. WTForms组件
		a. 实现方式？
		
			1. 自动生成HTML
				class LoginForm(Form):
					# 字段（内部包含正则表达式）
					name = simple.StringField(
						label='用户名',
						validators=[
							validators.DataRequired(message='用户名不能为空.'),
							validators.Length(min=6, max=18, message='用户名长度必须大于%(min)d且小于%(max)d')
						],
						widget=widgets.TextInput(), # 页面上显示的插件
						render_kw={'class': 'form-control'}

					)
					# 字段（内部包含正则表达式）
					pwd = simple.PasswordField(
						label='密码',
						validators=[
							validators.DataRequired(message='密码不能为空.'),
							validators.Length(min=8, message='用户名长度必须大于%(min)d'),
							validators.Regexp(regex="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?&]{8,}",
											  message='密码至少8个字符，至少1个大写字母，1个小写字母，1个数字和1个特殊字符')

						],
						widget=widgets.PasswordInput(),
						render_kw={'class': 'form-control'}
					)
					
					def __iter__(self):
						return iter([self.name,self.pwd])
				# 方式一：
					obj = LoginForm()
					print(obj.name) # 调用字段的__str__
				# 方式二：
					obj = LoginForm()
					for item in obj:
						print(item) # 调用字段的__str__
	
			
			2. 校验
			
				a. 后台定义好正则
				b. 用户发来数据
				c. 对数据进行校验
			
			
		b. 源码实现
			
			1. 自动生成HTML 
			
			
	2. SQLAlchmey ORM框架 
	
		目标：类/对象操作 -> SQL -> pymysql、MySQLdb -> 再在数据库中执行。
			
			
			
		a. 基本使用（不常见）
				import time
				import threading
				import sqlalchemy
				from sqlalchemy import create_engine
				from sqlalchemy.engine.base import Engine
				 
				示例一：
					engine = create_engine(
						"mysql+pymysql://root:123@127.0.0.1:3306/t1?charset=utf8",
						max_overflow=2,  # 超过连接池大小外最多创建的连接
						pool_size=5,  # 连接池大小
						pool_timeout=30,  # 池中没有线程最多等待的时间，否则报错
						pool_recycle=-1  # 多久之后对线程池中的线程进行一次连接的回收（重置）
					)
					
					conn = engine.raw_connection()
					cursor = conn.cursor()
					cursor.execute(
						"select * from t1"
					)
					result = cursor.fetchall()
					cursor.close()
					conn.close()
					
					
				示例二：
					engine = create_engine(
						"mysql+pymysql://root:123@127.0.0.1:3306/t1?charset=utf8",
						max_overflow=0,  # 超过连接池大小外最多创建的连接
						pool_size=5,  # 连接池大小
						pool_timeout=30,  # 池中没有线程最多等待的时间，否则报错
						pool_recycle=-1  # 多久之后对线程池中的线程进行一次连接的回收（重置）
					)
					
					def task(arg):
						conn = engine.raw_connection()
						cursor = conn.cursor()
						cursor.execute(
							#"select * from t1"
							"select sleep(2)"
						)
						result = cursor.fetchall()
						cursor.close()
						conn.close()
					 
					 
					for i in range(20):
						t = threading.Thread(target=task, args=(i,))
						t.start()
				
			
		b. ORM 
				models.py 
					#!/usr/bin/env python
					# -*- coding:utf-8 -*-
					import datetime
					from sqlalchemy import create_engine
					from sqlalchemy.ext.declarative import declarative_base
					from sqlalchemy import Column, Integer, String, Text, ForeignKey, DateTime, UniqueConstraint, Index

					Base = declarative_base()

					class Users(Base):
						__tablename__ = 'users' # 数据库表名称
						id = Column(Integer, primary_key=True) # id 主键
						name = Column(String(32), index=True, nullable=False) # name列，
						
					def init_db():
						"""
						根据类创建数据库表
						:return: 
						"""
						engine = create_engine(
							"mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8",
							max_overflow=0,  # 超过连接池大小外最多创建的连接
							pool_size=5,  # 连接池大小
							pool_timeout=30,  # 池中没有线程最多等待的时间，否则报错
							pool_recycle=-1  # 多久之后对线程池中的线程进行一次连接的回收（重置）
						)

						Base.metadata.create_all(engine)


					def drop_db():
						"""
						根据类删除数据库表
						:return: 
						"""
						engine = create_engine(
							"mysql+pymysql://root:123@127.0.0.1:3306/s6?charset=utf8",
							max_overflow=0,  # 超过连接池大小外最多创建的连接
							pool_size=5,  # 连接池大小
							pool_timeout=30,  # 池中没有线程最多等待的时间，否则报错
							pool_recycle=-1  # 多久之后对线程池中的线程进行一次连接的回收（重置）
						)

						Base.metadata.drop_all(engine)


					if __name__ == '__main__':
						#drop_db()
						#init_db()
			
			
				app.py 
					#!/usr/bin/env python
					# -*- coding:utf-8 -*-
					from sqlalchemy.orm import sessionmaker
					from sqlalchemy import create_engine
					from models import Users
					  
					 
					engine = create_engine("mysql+pymysql://root:123@127.0.0.1:3306/s6", max_overflow=0, pool_size=5)
					Connection = sessionmaker(bind=engine)
					  
					# 每次执行数据库操作时，都需要创建一个Connection
					con = Connection()
					  
					  
					# ############# 执行ORM操作 #############
					obj1 = Users(name="alex1")
					con.add(obj1)
					# 提交事务
					con.commit()
					
					
					
					# 关闭session
					con.close()
					
			
			
作业：
	1. WTForms流程（源码）
	
	2. SQLAlchemy基本操作+预习
	
	PS: 会议室作业（2个组长）
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	